{# File: twig-app/templates/pages/tickets.html.twig #}
{% extends 'layout/base.html.twig' %}

{% block content %}
<div class="container py-8">
    {# Page Header #}
    <div class="flex items-center justify-between mb-8">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">Tickets</h1>
            <p class="text-gray-600 mt-1">Manage your tickets</p>
        </div>
        <button
            onclick="openCreateModal()"
            class="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl font-semibold hover:from-blue-700 hover:to-blue-800 transition shadow-lg"
        >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Create Ticket
        </button>
    </div>

    {# Tickets Grid #}
    <div id="tickets-container">
        {# Will be rendered by JavaScript #}
    </div>
</div>

{# Modal for Create/Edit #}
<div id="ticket-modal" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50">
    <div class="bg-white rounded-2xl shadow-2xl max-w-lg w-full max-h-[90vh] overflow-y-auto">
        <div class="flex items-center justify-between p-6 border-b">
            <h2 id="modal-title" class="text-2xl font-bold text-gray-800">Create New Ticket</h2>
            <button onclick="closeModal()" class="p-2 hover:bg-gray-100 rounded-lg transition">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <div class="p-6">
            <form id="ticket-form" class="space-y-5">
                <input type="hidden" id="ticket-id" />

                {# Title #}
                <div>
                    <label for="title" class="block text-sm font-semibold text-gray-700 mb-2">
                        Title <span class="text-red-500">*</span>
                    </label>
                    <input
                        type="text"
                        id="title"
                        name="title"
                        placeholder="Enter ticket title"
                        class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition bg-white text-gray-900"
                        required
                    />
                    <p id="title-error" class="mt-2 text-sm text-red-600 hidden"></p>
                </div>

                {# Description #}
                <div>
                    <label for="description" class="block text-sm font-semibold text-gray-700 mb-2">Description</label>
                    <textarea
                        id="description"
                        name="description"
                        rows="4"
                        placeholder="Describe the issue..."
                        class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition resize-none bg-white text-gray-900"
                    ></textarea>
                    <p id="description-error" class="mt-2 text-sm text-red-600 hidden"></p>
                </div>

                {# Status #}
                <div>
                    <label for="status" class="block text-sm font-semibold text-gray-700 mb-2">
                        Status <span class="text-red-500">*</span>
                    </label>
                    <select
                        id="status"
                        name="status"
                        class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition bg-white text-gray-900"
                        required
                    >
                        <option value="">Select status...</option>
                        <option value="open">Open</option>
                        <option value="in_progress">In Progress</option>
                        <option value="closed">Closed</option>
                    </select>
                    <p id="status-error" class="mt-2 text-sm text-red-600 hidden"></p>
                </div>

                {# Priority #}
                <div>
                    <label for="priority" class="block text-sm font-semibold text-gray-700 mb-2">Priority</label>
                    <select
                        id="priority"
                        name="priority"
                        class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition bg-white text-gray-900"
                    >
                        <option value="">Select priority...</option>
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                    </select>
                    <p id="priority-error" class="mt-2 text-sm text-red-600 hidden"></p>
                </div>

                {# Action Buttons #}
                <div class="flex gap-3 pt-4">
                    <button
                        type="button"
                        onclick="closeModal()"
                        class="flex-1 px-6 py-3 bg-gray-200 text-gray-800 rounded-xl font-semibold hover:bg-gray-300 transition"
                    >
                        Cancel
                    </button>
                    <button
                        type="submit"
                        id="submit-btn"
                        class="flex-1 px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl font-semibold hover:from-blue-700 hover:to-blue-800 transition disabled:opacity-50"
                    >
                        Save Ticket
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const store = window.ticketStore;
    let currentEditId = null;

    // Check authentication
    checkAuth();

    function checkAuth() {
        const state = store.getState();
        if (!state.isAuthenticated) {
            window.location.href = '/auth/login';
            return;
        }
        renderTickets();
    }

    function renderTickets() {
        const state = store.getState();
        const tickets = state.tickets;
        const container = document.getElementById('tickets-container');

        if (tickets.length === 0) {
            container.innerHTML = `
                <div class="text-center py-16">
                    <div class="inline-block p-8 bg-gray-100 rounded-full mb-4">
                        <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                    </div>
                    <h3 class="text-xl font-semibold text-gray-900 mb-2">No tickets yet</h3>
                    <p class="text-gray-600 mb-6">Create your first ticket to get started</p>
                    <button onclick="openCreateModal()" class="inline-flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl font-semibold hover:from-blue-700 hover:to-blue-800 transition">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                        </svg>
                        Create Your First Ticket
                    </button>
                </div>
            `;
        } else {
            container.innerHTML = `
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
                    ${tickets.map(ticket => renderTicketCard(ticket)).join('')}
                </div>
            `;
        }
    }

    function renderTicketCard(ticket) {
        const statusColors = {
            open: 'bg-emerald-100 text-emerald-800',
            in_progress: 'bg-amber-100 text-amber-800',
            closed: 'bg-slate-100 text-slate-700'
        };

        const statusText = {
            open: 'Open',
            in_progress: 'In Progress',
            closed: 'Closed'
        };

        return `
            <article class="card-creative flex flex-col h-full">
                <div class="flex items-start justify-between gap-3 mb-3">
                    <div class="flex-1">
                        <h4 class="text-lg font-semibold text-white truncate">${escapeHtml(ticket.title)}</h4>
                        ${ticket.description ? `<p class="text-sm text-muted mt-1 line-clamp-3">${escapeHtml(ticket.description)}</p>` : ''}
                    </div>
                    <div class="ml-3">
                        <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium ${statusColors[ticket.status]}">
                            ${statusText[ticket.status] || ticket.status}
                        </span>
                    </div>
                </div>

                <div class="mt-auto flex items-center justify-between gap-3 pt-4 border-t border-white/6">
                    <div class="text-xs text-muted">
                        ${ticket.priority ? `<span class="mr-2 px-2 py-1 rounded-md bg-white/3 capitalize">${ticket.priority}</span>` : ''}
                        <span>${new Date(ticket.createdAt).toLocaleDateString()}</span>
                    </div>

                    <div class="flex items-center gap-2">
                        <button onclick="editTicket('${ticket.id}')" class="p-2 rounded-md hover:bg-white/3 transition" title="Edit">
                            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                            </svg>
                        </button>
                        <button onclick="deleteTicket('${ticket.id}')" class="p-2 rounded-md text-rose-400 hover:bg-white/3 transition" title="Delete">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                        </button>
                    </div>
                </div>
            </article>
        `;
    }

    function escapeHtml(text) {
        const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        return text.replace(/[&<>"']/g, m => map[m]);
    }

    // Modal functions
    window.openCreateModal = function() {
        currentEditId = null;
        document.getElementById('modal-title').textContent = 'Create New Ticket';
        document.getElementById('ticket-form').reset();
        document.getElementById('ticket-id').value = '';
        clearErrors();
        document.getElementById('ticket-modal').classList.remove('hidden');
    };

    window.editTicket = function(ticketId) {
        const state = store.getState();
        const ticket = state.tickets.find(t => t.id === ticketId);
        
        if (!ticket) return;

        currentEditId = ticketId;
        document.getElementById('modal-title').textContent = 'Edit Ticket';
        document.getElementById('ticket-id').value = ticket.id;
        document.getElementById('title').value = ticket.title;
        document.getElementById('description').value = ticket.description || '';
        document.getElementById('status').value = ticket.status;
        document.getElementById('priority').value = ticket.priority || '';
        clearErrors();
        document.getElementById('ticket-modal').classList.remove('hidden');
    };

    window.deleteTicket = async function(ticketId) {
        if (!confirm('Are you sure you want to delete this ticket?')) return;

        await store.deleteTicket(ticketId);
        showToast('success', 'Ticket deleted successfully!');
        renderTickets();
    };

    window.closeModal = function() {
        document.getElementById('ticket-modal').classList.add('hidden');
        currentEditId = null;
    };

    function clearErrors() {
        ['title', 'description', 'status', 'priority'].forEach(field => {
            const errorEl = document.getElementById(`${field}-error`);
            const inputEl = document.getElementById(field);
            if (errorEl) errorEl.classList.add('hidden');
            if (inputEl) inputEl.classList.remove('border-red-500');
        });
    }

    // Form submission
    document.getElementById('ticket-form').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        clearErrors();

        const formData = {
            title: document.getElementById('title').value,
            description: document.getElementById('description').value,
            status: document.getElementById('status').value,
            priority: document.getElementById('priority').value || 'medium',
        };

        const submitBtn = document.getElementById('submit-btn');
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner inline-block mr-2"></span> Saving...';

        let success;
        if (currentEditId) {
            success = await store.updateTicket(currentEditId, formData);
        } else {
            success = await store.createTicket(formData);
        }

        if (success) {
            showToast('success', currentEditId ? 'Ticket updated successfully!' : 'Ticket created successfully!');
            closeModal();
            renderTickets();
        } else {
            const errors = store.getState().formErrors;
            
            Object.keys(errors).forEach(field => {
                const errorEl = document.getElementById(`${field}-error`);
                const inputEl = document.getElementById(field);
                if (errorEl && inputEl) {
                    errorEl.textContent = errors[field];
                    errorEl.classList.remove('hidden');
                    inputEl.classList.add('border-red-500');
                }
            });

            showToast('error', 'Please fix the errors in the form');
        }

        submitBtn.disabled = false;
        submitBtn.textContent = 'Save Ticket';
    });

    // Toast function
    function showToast(type, message) {
        const container = document.getElementById('toast-container');
        
        const colors = {
            success: 'bg-green-50 border-green-200 text-green-800',
            error: 'bg-red-50 border-red-200 text-red-800',
            info: 'bg-blue-50 border-blue-200 text-blue-800'
        };

        const icons = {
            success: `<svg class="w-5 h-5 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
            </svg>`,
            error: `<svg class="w-5 h-5 text-red-600" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
            </svg>`,
            info: `<svg class="w-5 h-5 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
            </svg>`
        };

        const toast = document.createElement('div');
        toast.className = `${colors[type]} border rounded-lg shadow-lg p-4 flex items-center gap-3 max-w-sm animate-slide-in-right mb-4`;
        toast.innerHTML = `
            ${icons[type]}
            <p class="text-sm font-medium flex-1">${message}</p>
            <button onclick="this.parentElement.remove()" class="shrink-0">
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
            </button>
        `;

        container.appendChild(toast);
        setTimeout(() => toast.remove(), 3000);
    }

    // Subscribe to store changes
    store.subscribe(() => renderTickets());

    // Close modal with Escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeModal();
        }
    });

    // Close modal when clicking outside
    document.getElementById('ticket-modal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeModal();
        }
    });
});
</script>
{% endblock %}